#!/usr/bin/env python

import socket
import subprocess
import time
import re
import unittest

FAC_ONIONOO_PORT = 9003
FAC_ONIONOO_ADDR = ("127.0.0.1", FAC_ONIONOO_PORT)

ONIONOO_URL_QUERY = "https://onionoo.torproject.org/details?type=relay&running=true"

def ask_is_exit(onionoo_addr, proxy_addr):
    """It implements the client functionality in order to talk with the TCP server
    through the protocol defined by the TCP server ( it should be used within the
    Facilitator to check a proxy IP)."""
    f = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        f.connect(onionoo_addr)
        f.sendall(str(proxy_addr).encode("UTF-8"))

        response = f.recv(1024).strip()
    except Exception as e:
        print e
    finally:
        f.close()
    return (response == "EXIT", response)

class facOnionooServerTest(unittest.TestCase):

    def setUp(self):
        self.process = subprocess.Popen(["./onionoo-querying", "-d", "-p", str(FAC_ONIONOO_PORT), "-o", ONIONOO_URL_QUERY, "-l", "/dev/null"])
        # Give enough time to initialize the TCP server.
        time.sleep(1)

    def tearDown(self):
        self.process.terminate()
   
    def test_ask1(self):
        """It is checking the 'fac-onionoo' server with the local address as a proxy IP, so it must return False
        to the query if the IP belongs to a Tor Exit node.
        The query to the Onionoo server takes time, so the test is checking the code that the 'fac-onionoo'
        server returns after a query. If the code is NOT_EXIT_0 that means that the 'fac-onionoo' server
        still have an empty local db (it didn't finalize the query to the Onionoo server)."""
        is_not_initialized = True
        # We need enough time to query the Onionoo server.
        print '\n'
        while is_not_initialized:
           res = ask_is_exit(FAC_ONIONOO_ADDR, "127.0.0.1")
           if res[1] == "OK_0":
               print "Still not finished the query to the Onionoo Server, going to sleep 10 seconds and trying again."
               time.sleep(10)
           else:
               is_not_initialized = False
        self.assertEqual(res[0], False)

    def test_ask2(self):
        """It is checking the 'fac-onionoo' server with a Tor Exit node obtained from the Tor Browser Bundle 
        when it is starting and its public IP is checked against 'check.torproject.org'. Take care because
        the current IP could be down or closed, so it is better to use your own fresh IP.
        The query to the Onionoo server takes time, so the test is checking the code that the 'fac-onionoo'
        server returns after a query. If the code is NOT_EXIT_0 that means that the 'fac-onionoo' server
        still have an empty local db (it didn't finalize the query to the Onionoo server)."""
        is_not_initialized = True
        # We need enough time to query the Onionoo server.
        print '\n'
	while is_not_initialized:
           res = ask_is_exit(FAC_ONIONOO_ADDR, "31.172.30.1")
           if res[1] == "OK_0":
               print "Still not finished the query to the Onionoo Server, going to sleep 10 seconds and trying again."
               time.sleep(10)
           else:
               is_not_initialized = False
        self.assertEqual(res[0], True)    

if __name__ == "__main__":
    unittest.main()
